use matrix_sdk::UInt;
use serde::Deserialize;
use serde_json::Value as JsonValue;
use url::Url;

use crate::api::{
    common::{App, AuthorAssociation, Dt, Label, Org, Repo, User},
    installation::Installation,
    issue::Issue,
};

/// The actions that can be taken for an issue comment event.
#[derive(Clone, Debug, Deserialize)]
#[serde(rename_all = "lowercase")]
pub enum IssueCommentAction {
    /// Created an issue.
    Created,

    /// The issue has been edited.
    Edited,

    /// The issue has been deleted.
    Deleted,
}

/// The payload of an issue event.
#[derive(Clone, Debug, Deserialize)]
pub struct IssueCommentEvent {
    /// The action that was performed.
    pub action: IssueCommentAction,

    /// Information about the issue.
    pub issue: Issue,

    /// The comment that triggered the event.
    pub comment: Comment,

    /// The changes to the comment if the action was edited.
    pub changes: Option<JsonValue>,

    /// The [`User`] who is assigned this issue.
    pub assignee: Option<User>,

    /// The [`Label`] assigned to this issue.
    pub label: Option<Label>,

    /// Detailed information about the repository that was stared.
    pub repository: Repo,

    /// Detailed information about the organization the repo that was stared
    /// belongs to.
    pub organization: Option<Org>,

    /// Information about Github app installation.
    ///
    /// This is only present if the event is sent from said app.
    pub installation: Option<Installation>,

    /// Detailed information about the user who stared the repo.
    pub sender: User,
}

#[derive(Clone, Debug, Deserialize)]
pub struct Comment {
    /// Numeric identifier of the comment.
    pub id: UInt,

    /// String identifier of the comment.
    pub node_id: String,

    /// The Github api url.
    pub url: Url,

    /// The public web page url.
    pub html_url: Url,

    /// The body of the comment.
    pub body: Option<String>,

    /// The user who wrote the comment.
    pub user: User,

    /// Time in UTC this comment was created.
    pub created_at: Dt,

    /// Time in UTC this comment was last updated.
    pub updated_at: Dt,

    /// The association of the author to the repository.
    pub author_association: AuthorAssociation,

    /// If present this comment was generated by a github app.
    pub app: Option<App>,
}
